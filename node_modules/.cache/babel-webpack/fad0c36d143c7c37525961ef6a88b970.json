{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PropertiesService = /*#__PURE__*/(() => {\n  class PropertiesService {\n    constructor(http) {\n      this.http = http;\n      this.apiURLProperties = environment.apiURL + 'properties';\n    } // Getting the property from the backend\n\n\n    getProperties(selectedCats, selectedMogatas, priceRange, rooms, rent = false) {\n      let params = new HttpParams();\n\n      if (selectedCats && selectedCats !== []) {\n        params = params.append('categories', selectedCats.join(','));\n      }\n\n      if (selectedMogatas && selectedMogatas !== []) {\n        params = params.append('mogatas', selectedMogatas.join(','));\n      }\n\n      if (priceRange && priceRange[0] !== '') {\n        params = params.append('price', priceRange.join(','));\n      }\n\n      if (rooms) {//\n      }\n\n      if (!rent) {\n        return this.http.get(this.apiURLProperties, {\n          params\n        });\n      } else {\n        return this.http.get(`${this.apiURLProperties}/rent`, {\n          params\n        });\n      }\n    } // Getting the property from the backend by mogata\n\n\n    getByMogata(selectedCats) {\n      let params = new HttpParams();\n      params = params.append('mogatas', selectedCats.join(','));\n      return this.http.get(this.apiURLProperties, {\n        params\n      });\n    } // Getting the property from the backend by mogata\n\n\n    getByPrice(numbers) {\n      let params = new HttpParams();\n      params = params.append('price', numbers);\n      return this.http.get(this.apiURLProperties, {\n        params\n      });\n    } // Getting the property from the backend by wilaya\n\n\n    getByWilaya(selectedCats) {\n      let params = new HttpParams();\n\n      if (selectedCats) {\n        params = params.append('wilaya', selectedCats.join(','));\n        return this.http.get(this.apiURLProperties, {\n          params\n        });\n      }\n\n      return this.http.get(this.apiURLProperties);\n    } // Getting a specific property by id\n\n\n    getSingleProperty(ProductId) {\n      return this.http.get(`${this.apiURLProperties}/${ProductId}`);\n    } // Getting a specific property by id\n\n\n    getUserProperty(ProductId) {\n      return this.http.get(`${this.apiURLProperties}/users/${ProductId}`);\n    } // Getting a property by name\n\n\n    getPropertyByName(propertyName) {\n      return this.http.get(`${this.apiURLProperties}/name/${propertyName}`);\n    } // Creating a Property\n\n\n    createProperty(propertyFormData) {\n      return this.http.post(this.apiURLProperties, propertyFormData);\n    } // Creating a Property\n\n\n    createUserProperty(propertyFormData) {\n      return this.http.post(`${this.apiURLProperties}/users`, propertyFormData);\n    } // Getting featured properties\n\n\n    getFeaturedProperties(count) {\n      return this.http.get(`${this.apiURLProperties}/get/featured/${count}`);\n    } // Updating a Property\n\n\n    updateProperty(propertyFormData, PropertyId) {\n      //updating a specific Property\n      return this.http.put(`${this.apiURLProperties}/${PropertyId}`, propertyFormData);\n    } // Deleting a Property\n\n\n    deleteProperty(id) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return this.http.delete(`${this.apiURLProperties}/${id}`);\n    } // Deleting user Property\n\n\n    deleteUserProperty(id) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return this.http.delete(`${this.apiURLProperties}/users/${id}`);\n    }\n\n    uploadPropertyImages(propertyFormData, id) {\n      return this.http.put(`${this.apiURLProperties}/gallery-image/${id}`, propertyFormData);\n    } // Getting user properties\n\n\n    getUserProperties() {\n      return this.http.get(`${this.apiURLProperties}/users`);\n    } // Validate the th user property\n\n\n    validate(id) {\n      let object = {};\n      return this.http.post(`${this.apiURLProperties}/validate/${id}`, object);\n    }\n\n  }\n\n  PropertiesService.ɵfac = function PropertiesService_Factory(t) {\n    return new (t || PropertiesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  PropertiesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PropertiesService,\n    factory: PropertiesService.ɵfac,\n    providedIn: 'root'\n  });\n  return PropertiesService;\n})();","map":null,"metadata":{},"sourceType":"module"}